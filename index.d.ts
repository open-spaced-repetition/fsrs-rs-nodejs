/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/**
 * directly use fsrs::DEFAULT_PARAMETERS will cause error.
 * referencing statics in constants is unstable
 * see issue #119618 <https://github.com/rust-lang/rust/issues/119618> for more information
 * `static` and `const` variables can refer to other `const` variables. A `const` variable, however, cannot refer to a `static` variable.
 * to fix this, the value can be extracted to a `const` and then used.
 */
export const DEFAULT_PARAMETERS: number[]
export interface ModelEvaluation {
  logLoss: number
  rmseBins: number
}
export declare class FSRS {
  constructor(parameters?: Array<number> | undefined | null)
  computeParameters(trainSet: Array<FSRSItem>, enableShortTerm: boolean, progressJsFn?: (err: null | Error, value: { current: number, total: number, percent: number }) => void, timeout?: number): Promise<Array<number>>
  nextStates(currentMemoryState: MemoryState | undefined | null, desiredRetention: number, daysElapsed: number): NextStates
  benchmark(trainSet: Array<FSRSItem>, enableShortTerm: boolean): Array<number>
  evaluate(trainSet: Array<FSRSItem>): ModelEvaluation
  memoryStateFromSm2(easeFactor: number, interval: number, sm2Retention: number): MemoryState
  memoryState(item: FSRSItem, startingState?: MemoryState | undefined | null): MemoryState
}
export declare class FSRSReview {
  constructor(rating: number, deltaT: number)
  get rating(): number
  get deltaT(): number
  toJSON(): string
}
export declare class FSRSItem {
  constructor(reviews: Array<FSRSReview>)
  get reviews(): Array<FSRSReview>
  longTermReviewCnt(): number
  toJSON(): string
}
export declare class MemoryState {
  constructor(stability: number, difficulty: number)
  get stability(): number
  get difficulty(): number
  toJSON(): string
}
export declare class NextStates {
  get hard(): ItemState
  get good(): ItemState
  get easy(): ItemState
  get again(): ItemState
  toJSON(): string
}
export declare class ItemState {
  get memory(): MemoryState
  get interval(): number
  toJSON(): string
}
